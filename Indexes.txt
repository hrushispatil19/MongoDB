Indexes:
=========
Indexes are special data structure that stores small portion of collection dataset.
It stores value of specific field or set of fields ordered by value of field.
Indexes execute a query more efficiently.

MongoDB creates a unique index on the _id field during the creation of a collection.
We cannot drop this index on the _id field.
> db.persons.getIndexes()
[ { "v" : 2, "key" : { "_id" : 1 }, "name" : "_id_" } ]


~ Type of indexes:-
==================

* Single Field Indexes: Used to create ascending/descending indexes on single field.
-----------------------

> db.persons.createIndex({"dob.age" : 1})
{
        "numIndexesBefore" : 1,
        "numIndexesAfter" : 2,
        "createdCollectionAutomatically" : false,
        "ok" : 1
}
> db.persons.getIndexes()
[
        {
                "v" : 2,
                "key" : {
                        "_id" : 1
                },
                "name" : "_id_"
        },
        {
                "v" : 2,
                "key" : {
                        "dob.age" : 1
                },
                "name" : "dob.age_1"
        }
]

Queries:
After Index :- 
> db.persons.explain("executionStats").find({"dob.age" :{$lt: 40}})
{
        "explainVersion" : "1",
        "queryPlanner" : {
                "namespace" : "indexDB.persons",
                "indexFilterSet" : false,
                "parsedQuery" : {
                        "dob.age" : {
                                "$lt" : 40
                        }
                },
                "maxIndexedOrSolutionsReached" : false,
                "maxIndexedAndSolutionsReached" : false,
                "maxScansToExplodeReached" : false,
                "winningPlan" : {
                        "stage" : "FETCH",
                        "inputStage" : {
                                "stage" : "IXSCAN",
                                "keyPattern" : {
                                        "dob.age" : 1
                                },
                                "indexName" : "dob.age_1",
                                "isMultiKey" : false,
                                "multiKeyPaths" : {
                                        "dob.age" : [ ]
                                },
                                "isUnique" : false,
                                "isSparse" : false,
                                "isPartial" : false,
                                "indexVersion" : 2,
                                "direction" : "forward",
                                "indexBounds" : {
                                        "dob.age" : [
                                                "[-inf.0, 40.0)"
                                        ]
                                }
                        }
                },
                "rejectedPlans" : [ ]
        },
        "executionStats" : {
                "executionSuccess" : true,
                "nReturned" : 1778,
                "executionTimeMillis" : 3,   <-- less exec. time 
                "totalKeysExamined" : 1778,
                "totalDocsExamined" : 1778,  <-- less docs examined
                "executionStages" : {
                        "stage" : "FETCH",
                        "nReturned" : 1778,
                        "executionTimeMillisEstimate" : 0,
                        "works" : 1779,
                        "advanced" : 1778,
                        "needTime" : 0,
                        "needYield" : 0,
                        "saveState" : 1,
                        "restoreState" : 1,
                        "isEOF" : 1,
                        "docsExamined" : 1778,
                        "alreadyHasObj" : 0,
                        "inputStage" : {
                                "stage" : "IXSCAN",   <-- Index Scan
                                "nReturned" : 1778,
                                "executionTimeMillisEstimate" : 0,
                                "works" : 1779,
                                "advanced" : 1778,
                                "needTime" : 0,
                                "needYield" : 0,
                                "saveState" : 1,
                                "restoreState" : 1,
                                "isEOF" : 1,
                                "keyPattern" : {
                                        "dob.age" : 1
                                },
                                "indexName" : "dob.age_1",
                                "isMultiKey" : false,
                                "multiKeyPaths" : {
                                        "dob.age" : [ ]
                                },
                                "isUnique" : false,
                                "isSparse" : false,
                                "isPartial" : false,
                                "indexVersion" : 2,
                                "direction" : "forward",
                                "indexBounds" : {
                                        "dob.age" : [
                                                "[-inf.0, 40.0)"
                                        ]
                                },
                                "keysExamined" : 1778,
                                "seeks" : 1,
                                "dupsTested" : 0,
                                "dupsDropped" : 0
                        }
                }
        },
        "command" : {
                "find" : "persons",
                "filter" : {
                        "dob.age" : {
                                "$lt" : 40
                        }
                },
                "$db" : "indexDB"
        },
        "serverInfo" : {
                "host" : "HVDIVD04TXD2283",
                "port" : 27017,
                "version" : "5.0.6",
                "gitVersion" : "212a8dbb47f07427dae194a9c75baec1d81d9259"
        },
        "serverParameters" : {
                "internalQueryFacetBufferSizeBytes" : 104857600,
                "internalQueryFacetMaxOutputDocSizeBytes" : 104857600,
                "internalLookupStageIntermediateDocumentMaxSizeBytes" : 104857600,
                "internalDocumentSourceGroupMaxMemoryBytes" : 104857600,
                "internalQueryMaxBlockingSortMemoryUsageBytes" : 104857600,
                "internalQueryProhibitBlockingMergeOnMongoS" : 0,
                "internalQueryMaxAddToSetBytes" : 104857600,
                "internalDocumentSourceSetWindowFieldsMaxMemoryBytes" : 104857600
        },
        "ok" : 1
}

Before Index Creation:
> db.persons.dropIndex({"dob.age" : 1})  //To Drop Specific Index
{ "nIndexesWas" : 2, "ok" : 1 }

> db.persons.explain("executionStats").find({"dob.age" :{$lt: 40}})
{
        "explainVersion" : "1",
        "queryPlanner" : {
                "namespace" : "indexDB.persons",
                "indexFilterSet" : false,
                "parsedQuery" : {
                        "dob.age" : {
                                "$lt" : 40
                        }
                },
                "maxIndexedOrSolutionsReached" : false,
                "maxIndexedAndSolutionsReached" : false,
                "maxScansToExplodeReached" : false,
                "winningPlan" : {
                        "stage" : "COLLSCAN",
                        "filter" : {
                                "dob.age" : {
                                        "$lt" : 40
                                }
                        },
                        "direction" : "forward"
                },
                "rejectedPlans" : [ ]
        },
        "executionStats" : {
                "executionSuccess" : true,
                "nReturned" : 1778,
                "executionTimeMillis" : 4,  <-- more exec. time 
                "totalKeysExamined" : 0,
                "totalDocsExamined" : 5000,   <-- more docs examined
                "executionStages" : {
                        "stage" : "COLLSCAN",   <-- Collection Scan (whole docs scanned)
                        "filter" : {
                                "dob.age" : {
                                        "$lt" : 40
                                }
                        },
                        "nReturned" : 1778,
                        "executionTimeMillisEstimate" : 0,
                        "works" : 5002,
                        "advanced" : 1778,
                        "needTime" : 3223,
                        "needYield" : 0,
                        "saveState" : 5,
                        "restoreState" : 5,
                        "isEOF" : 1,
                        "direction" : "forward",
                        "docsExamined" : 5000
                }
        },
        "command" : {
                "find" : "persons",
                "filter" : {
                        "dob.age" : {
                                "$lt" : 40
                        }
                },
                "$db" : "indexDB"
        },
        "serverInfo" : {
                "host" : "HVDIVD04TXD2283",
                "port" : 27017,
                "version" : "5.0.6",
                "gitVersion" : "212a8dbb47f07427dae194a9c75baec1d81d9259"
        },
        "serverParameters" : {
                "internalQueryFacetBufferSizeBytes" : 104857600,
                "internalQueryFacetMaxOutputDocSizeBytes" : 104857600,
                "internalLookupStageIntermediateDocumentMaxSizeBytes" : 104857600,
                "internalDocumentSourceGroupMaxMemoryBytes" : 104857600,
                "internalQueryMaxBlockingSortMemoryUsageBytes" : 104857600,
                "internalQueryProhibitBlockingMergeOnMongoS" : 0,
                "internalQueryMaxAddToSetBytes" : 104857600,
                "internalDocumentSourceSetWindowFieldsMaxMemoryBytes" : 104857600
        },
        "ok" : 1
}

* Compound Indexes: Used to create indexes on set of fields. In Compound indexes, single index structure holds references to multiple fields.
-------------------
> db.persons.createIndex({"dob.age": -1, "gender": 1})
{
        "numIndexesBefore" : 1,
        "numIndexesAfter" : 2,
        "createdCollectionAutomatically" : false,
        "ok" : 1
}

> db.persons.find({"dob.age": {$lt : 30}, gender: "female"}, {name: 1, "dob.age":1, gender: 1, _id: 0})
{ "gender" : "female", "name" : { "title" : "mrs", "first" : "gonca", "last" : "alnıaçık" }, "dob" : { "age" : 29 } }
{ "gender" : "female", "name" : { "title" : "miss", "first" : "leah", "last" : "long" }, "dob" : { "age" : 29 } }
{ "gender" : "female", "name" : { "title" : "mrs", "first" : "peggy", "last" : "johnston" }, "dob" : { "age" : 29 } }
{ "gender" : "female", "name" : { "title" : "miss", "first" : "julia", "last" : "manner" }, "dob" : { "age" : 29 } }
{ "gender" : "female", "name" : { "title" : "ms", "first" : "paula", "last" : "rubio" }, "dob" : { "age" : 29 } }
{ "gender" : "female", "name" : { "title" : "mrs", "first" : "othilie", "last" : "børstad" }, "dob" : { "age" : 29 } }
{ "gender" : "female", "name" : { "title" : "mrs", "first" : "dora", "last" : "vieira" }, "dob" : { "age" : 29 } }
{ "gender" : "female", "name" : { "title" : "mrs", "first" : "nuria", "last" : "huissen" }, "dob" : { "age" : 29 } }
{ "gender" : "female", "name" : { "title" : "ms", "first" : "alisa", "last" : "ylitalo" }, "dob" : { "age" : 29 } }
{ "gender" : "female", "name" : { "title" : "mrs", "first" : "petúnia", "last" : "silva" }, "dob" : { "age" : 29 } }
{ "gender" : "female", "name" : { "title" : "madame", "first" : "morgane", "last" : "michel" }, "dob" : { "age" : 29 } }
{ "gender" : "female", "name" : { "title" : "miss", "first" : "hildegart", "last" : "rau" }, "dob" : { "age" : 29 } }
{ "gender" : "female", "name" : { "title" : "miss", "first" : "amber", "last" : "adams" }, "dob" : { "age" : 29 } }
{ "gender" : "female", "name" : { "title" : "ms", "first" : "lisa", "last" : "sanders" }, "dob" : { "age" : 29 } }
{ "gender" : "female", "name" : { "title" : "miss", "first" : "brooke", "last" : "bailey" }, "dob" : { "age" : 29 } }
{ "gender" : "female", "name" : { "title" : "miss", "first" : "frauke", "last" : "knorr" }, "dob" : { "age" : 29 } }
{ "gender" : "female", "name" : { "title" : "ms", "first" : "anna", "last" : "rice" }, "dob" : { "age" : 29 } }
{ "gender" : "female", "name" : { "title" : "ms", "first" : "olenka", "last" : "da rosa" }, "dob" : { "age" : 29 } }
{ "gender" : "female", "name" : { "title" : "mrs", "first" : "hannah", "last" : "lilleberg" }, "dob" : { "age" : 29 } }
{ "gender" : "female", "name" : { "title" : "mrs", "first" : "rose", "last" : "guerin" }, "dob" : { "age" : 29 } }
...
Note: Creating indexes will also speedup sort operation as documents are already in sorted manner.

> db.persons.find({"dob.age" : 34}).sort({"dob.age":1})
{ "_id" : ObjectId("6258686cbe6b0587d55dd6f5"), "gender" : "female", "name" : { "title" : "mrs", "first" : "cléo", "last" : "roose" }, "location" : { "street" : "4589 blauwkapelseweg", "city" : "de friese meren", "state" : "noord-brabant", "postcode" : 30451, "coordinates" : { "latitude" : "85.1163", "longitude" : "99.1988" }, "timezone" : { "offset" : "+1:00", "description" : "Brussels, Copenhagen, Madrid, Paris" } }, "email" : "cléo.roose@example.com", "login" : { "uuid" : "c057ae42-524c-44a5-b911-a0be9377a58f", "username" : "crazyleopard800", "password" : "candy", "salt" : "RdEsjrMD", "md5" : "8b7efd2cde3aaa97adc5bbc6f02766da", "sha1" : "dbd61f88d2aa630dae169371e9e10558e1332cbf", "sha256" : "884d8299f5fd5d0896c8640330a3b182c62d70e826ad174506fc6cc7c659a3ac" }, "dob" : { "date" : "1983-09-24T06:56:58Z", "age" : 34 }, "registered" : { "date" : "2003-11-04T18:48:02Z", "age" : 14 }, "phone" : "(701)-774-6960", "cell" : "(417)-953-1493", "id" : { "name" : "BSN", "value" : "41358381" }, "picture" : { "large" : "https://randomuser.me/api/portraits/women/73.jpg", "medium" : "https://randomuser.me/api/portraits/med/women/73.jpg", "thumbnail" : "https://randomuser.me/api/portraits/thumb/women/73.jpg" }, "nat" : "NL" }

* Index Properties:
===================

Unique Indexes: UI ensures that indexed fields do not store duplicate values.
---------------
> db.persons.createIndex({"phone" : 1},{unique: true})
{
        "numIndexesBefore" : 3,
        "numIndexesAfter" : 4,
        "createdCollectionAutomatically" : false,
        "ok" : 1
}

> db.persons.createIndex({"dob.age" : 1},{unique: true})
{
        "ok" : 0,
        "errmsg" : "Index build failed: 2b45049a-6834-4702-ba1a-dfa1fc78b1fc: Collection indexDB.persons ( bfed2885-423b-4379-8581-5289e584372b ) :: caused by :: E11000 duplicate key error collection: indexDB.persons index: dob.age_1 dup key: { dob.age: 21 }",
        "code" : 11000,
        "codeName" : "DuplicateKey",
        "keyPattern" : {
                "dob.age" : 1
        },
        "keyValue" : {
                "dob.age" : 21
        }
}
Note: Index creation will fail if specified field is having duplicate values. Also it will restrict insertion of duplicate values.

Partial Indexes: PI only index documents in a collection that meets a specified filter expression.
----------------
> db.persons.createIndex({"dob.age": 1},{partialFilterExpression: {gender: "male"}})
{
        "numIndexesBefore" : 1,
        "numIndexesAfter" : 2,
        "createdCollectionAutomatically" : false,
        "ok" : 1
}

Note: We can use both combination of unique and partial indexes.
> db.persons.createIndex({"dob.age": 1},{unique:true, partialFilterExpression: {age: {$lt: 25}}})
{
        "numIndexesBefore" : 2,
        "numIndexesAfter" : 3,
        "createdCollectionAutomatically" : false,
        "ok" : 1
}

Time-To-Live Indexes: TTL indexes are special single-field indexes that automatically removes documents from a collection after a certain amount of time.
--------------------- Data expiration is useful for certain types of information like machine generated event data, logs, and session information.

> db.sessions.createIndex({timestamp: 1},{expireAfterSeconds: 30})
{
        "numIndexesBefore" : 1,
        "numIndexesAfter" : 2,
        "createdCollectionAutomatically" : false,
        "ok" : 1
}
> db.sessions.insertOne({sessionVal: "s123ab43457d", timestamp: new Date()})
{
        "acknowledged" : true,
        "insertedId" : ObjectId("62669d3d2255de3e2be2da8a")
}
> db.sessions.find()
{ "_id" : ObjectId("62669d3d2255de3e2be2da8a"), "sessionVal" : "s123ab43457d", "timestamp" : ISODate("2022-04-25T13:08:13.179Z") }
After 30 seconds:
> db.sessions.find()
> 


For Query Diagnosis and Query Planning: use explain() method
> db.persons.explain().find({"dob.age" : {$gt: 20}})
> db.persons.explain("executionStats").find({"dob.age" : {$gt: 20}})
> db.persons.explain("queryPlanner").find({"dob.age" : {$gt: 20}})
> db.persons.explain("allPlansExecution").find({"dob.age" : {$gt: 20}})

* Multi-Key Indexes: Multi-Key indexes are used to create index on an array field.
-------------------- In Multi-Key indexes, MongoDB creates an index key for each element in an array.

> db.stud.find().pretty()
{
        "_id" : ObjectId("6266ef382255de3e2be2da8c"),
        "name" : "Sam",
        "hobbies" : [
                "reading",
                "writing"
        ],
        "addresses" : [
                {
                        "street" : "Baker Street 221B"
                },
                {
                        "street" : "Duke Street"
                }
        ]
}
{
        "_id" : ObjectId("6266eee92255de3e2be2da8b"),
        "name" : "Ron",
        "hobbies" : [
                "reading",
                "games"
        ],
        "addresses" : [
                {
                        "street" : "Baker Street"
                },
                {
                        "street" : "Brick lane"
                }
        ]
}

Array of values:
> db.stud.createIndex({hobbies: 1})
{
        "numIndexesBefore" : 1,
        "numIndexesAfter" : 2,
        "createdCollectionAutomatically" : false,
        "ok" : 1
}
> db.stud.find({"hobbies" : "games"})
{ "_id" : ObjectId("6266eee92255de3e2be2da8b"), "name" : "Ron", "hobbies" : [ "reading", "games" ], "addresses" : [ { "street" : "Baker Street" }, { "street" : "Brick lane" } ] }
> db.stud.find({"hobbies" : "games"}).explain()
{
        "explainVersion" : "1",
        "queryPlanner" : {
                "namespace" : "indexDB.stud",
                "indexFilterSet" : false,
                "parsedQuery" : {
                        "hobbies" : {
                                "$eq" : "games"
                        }
                },
                "queryHash" : "895C9692",
                "planCacheKey" : "439794C9",
                "maxIndexedOrSolutionsReached" : false,
                "maxIndexedAndSolutionsReached" : false,
                "maxScansToExplodeReached" : false,
                "winningPlan" : {
                        "stage" : "FETCH",
                        "inputStage" : {
                                "stage" : "IXSCAN",
                                "keyPattern" : {
                                        "hobbies" : 1
                                },
                                "indexName" : "hobbies_1",
                                "isMultiKey" : true,		<-- MultiKey is true 
                                "multiKeyPaths" : {
                                        "hobbies" : [
                                                "hobbies"
                                        ]
                                }

Array of documents:
> db.stud.createIndex({addresses: -1})
{
        "numIndexesBefore" : 2,
        "numIndexesAfter" : 3,
        "createdCollectionAutomatically" : false,
        "ok" : 1
}
> db.stud.explain().find({"addresses.street": "Baker Street 221B"})
{
        "explainVersion" : "1",
        "queryPlanner" : {
                "namespace" : "indexDB.stud",
                "indexFilterSet" : false,
                "parsedQuery" : {
                        "addresses.street" : {
                                "$eq" : "Baker Street 221B"
                        }
                },
                "queryHash" : "7CACFF56",
                "planCacheKey" : "7293519F",
                "maxIndexedOrSolutionsReached" : false,
                "maxIndexedAndSolutionsReached" : false,
                "maxScansToExplodeReached" : false,
                "winningPlan" : {
                "stage" : "COLLSCAN",   <-- CollScan is performed as we have not specified value as indexes key ("addresses"). 
						So use array field name or create index on "arrayField.docElementField". Refer below 2 ways1. 
                "filter" : {
                                "addresses.street" : {
                                        "$eq" : "Baker Street 221B"
                                }
                },
                        "direction" : "forward"
                }


1.
> db.stud.explain().find({"addresses": {"street": "Baker Street 221B"} })
{
        "explainVersion" : "1",
        "queryPlanner" : {
                "namespace" : "indexDB.stud",
                "indexFilterSet" : false,
                "parsedQuery" : {
                        "addresses" : {
                                "$eq" : {
                                        "street" : "Baker Street 221B"
                                }
                        }
                },
                "queryHash" : "D5FF3435",
                "planCacheKey" : "0D24A09A",
                "maxIndexedOrSolutionsReached" : false,
                "maxIndexedAndSolutionsReached" : false,
                "maxScansToExplodeReached" : false,
                "winningPlan" : {
                        "stage" : "FETCH",
                        "inputStage" : {
                                "stage" : "IXSCAN",
                                "keyPattern" : {
                                        "addresses" : -1
                                },
                                "indexName" : "addresses_-1",
                                "isMultiKey" : true,		<-- MultiKey is true 
                                "multiKeyPaths" : {
                                        "addresses" : [
                                                "addresses"
                                        ]
                                }

2. 
> db.stud.createIndex({"addresses.street": -1})
{
        "numIndexesBefore" : 1,
        "numIndexesAfter" : 2,
        "createdCollectionAutomatically" : false,
        "ok" : 1
}
> db.stud.explain().find({"addresses.street": "Baker Street 221B"})
{
        "explainVersion" : "1",
        "queryPlanner" : {
                "namespace" : "indexDB.stud",
                "indexFilterSet" : false,
                "parsedQuery" : {
                        "addresses.street" : {
                                "$eq" : "Baker Street 221B"
                        }
                },
                "queryHash" : "7CACFF56",
                "planCacheKey" : "92DE1F16",
                "maxIndexedOrSolutionsReached" : false,
                "maxIndexedAndSolutionsReached" : false,
                "maxScansToExplodeReached" : false,
                "winningPlan" : {
                        "stage" : "FETCH",
                        "inputStage" : {
                                "stage" : "IXSCAN",
                                "keyPattern" : {
                                        "addresses.street" : -1
                                },
                                "indexName" : "addresses.street_-1",
                                "isMultiKey" : true,		<-- MultiKey is true 
                                "multiKeyPaths" : {
                                        "addresses.street" : [
                                                "addresses"
                                        ]
                                }


Note: We can create compound index by using only one array field and many non-array fields. But we cannot use parallel array fields to create compound index.
> db.stud.createIndex({name:1, addresses: 1})
{
        "numIndexesBefore" : 3,
        "numIndexesAfter" : 4,
        "createdCollectionAutomatically" : false,
        "ok" : 1
}
> db.stud.createIndex({hobbies:1, addresses: 1})  // Both are array fields
{
        "ok" : 0,
        "errmsg" : "Index build failed: b520afc2-4b71-435d-9078-e5c418d410ea: Collection indexDB.stud ( 8bd4a1f1-12cc-4e43-8ac0-5091f2825bc8 ) :: caused by :: cannot index parallel arrays [addresses] [hobbies]",
        "code" : 171,
        "codeName" : "CannotIndexParallelArrays"
}

* Text Indexes:
---------------
> db.stores.find()
{ "_id" : 1, "name" : "Java Hut", "description" : "Coffee and cakes" }
{ "_id" : 2, "name" : "Burger Buns", "description" : "Gourmet hamburgers" }
{ "_id" : 3, "name" : "Coffee Shop", "description" : "Just coffee" }
{ "_id" : 4, "name" : "Clothes Clothes Clothes", "description" : "Discount clothing" }
{ "_id" : 5, "name" : "Java Shopping", "description" : "Indonesian goods" }

> db.stores.createIndex({name: "text"})
{
        "numIndexesBefore" : 1,
        "numIndexesAfter" : 2,
        "createdCollectionAutomatically" : false,
        "ok" : 1
}
We can create only one text index per collection.
> db.stores.dropIndex("name_text")
{ "nIndexesWas" : 2, "ok" : 1 }

> db.stores.createIndex({name: "text",description: "text"})
{
        "numIndexesBefore" : 1,
        "numIndexesAfter" : 2,
        "createdCollectionAutomatically" : false,
        "ok" : 1
}
> db.stores.createIndex({name: "text",description: "text"},{name: "myTextIndex"})
{
        "numIndexesBefore" : 1,
        "numIndexesAfter" : 2,
        "createdCollectionAutomatically" : false,
        "ok" : 1
}

Text Search Examples:

> db.stores.find({$text: {$search: "coffee"}})
{ "_id" : 3, "name" : "Coffee Shop", "description" : "Just coffee" }   
{ "_id" : 1, "name" : "Java Hut", "description" : "Coffee and cakes" }
> db.stores.find({$text: {$search: "coffee shop"}})				<-- will check for coffee or shop (separate) texts in a collection
{ "_id" : 3, "name" : "Coffee Shop", "description" : "Just coffee" }
{ "_id" : 1, "name" : "Java Hut", "description" : "Coffee and cakes" }
{ "_id" : 5, "name" : "Java Shopping", "description" : "Indonesian goods" }
> db.stores.find({$text: {$search: "\"coffee shop\""}})
{ "_id" : 3, "name" : "Coffee Shop", "description" : "Just coffee" }
> db.stores.find({$text: {$search: "coffee -shop"}})  				 <-- will check for coffee but exclude shop word
{ "_id" : 1, "name" : "Java Hut", "description" : "Coffee and cakes" }
> db.stores.find({$text: {$search: "coffee shop"}},{score: {$meta: "textScore"}})
{ "_id" : 5, "name" : "Java Shopping", "description" : "Indonesian goods", "score" : 0.75 }
{ "_id" : 3, "name" : "Coffee Shop", "description" : "Just coffee", "score" : 2.25 }
{ "_id" : 1, "name" : "Java Hut", "description" : "Coffee and cakes", "score" : 0.75 }
> db.stores.find({$text: {$search: "coffee shop"}},{score: {$meta: "textScore"}}).sort({score: {$meta: "textScore"}})  <-- will sort docs as per textScore
{ "_id" : 3, "name" : "Coffee Shop", "description" : "Just coffee", "score" : 2.25 }
{ "_id" : 1, "name" : "Java Hut", "description" : "Coffee and cakes", "score" : 0.75 }
{ "_id" : 5, "name" : "Java Shopping", "description" : "Indonesian goods", "score" : 0.75 }
> db.stores.find({$text: {$search: "shop", $caseSensitive: true}})
> db.stores.find({$text: {$search: "shop", $caseSensitive: false}})
{ "_id" : 5, "name" : "Java Shopping", "description" : "Indonesian goods" }
{ "_id" : 3, "name" : "Coffee Shop", "description" : "Just coffee" }

Setting up default language and Using Weights:
-----------------------------------------------
> db.stores.createIndex({name: "text", description: "text"},{default_language: "english"})
{
        "numIndexesBefore" : 1,
        "numIndexesAfter" : 2,
        "createdCollectionAutomatically" : false,
        "ok" : 1
}

With default weights:
> db.stores.find({$text: {$search: "Coffee"}},{score: {$meta: "textScore"}})
{ "_id" : 1, "name" : "Java Hut", "description" : "Coffee and cakes", "score" : 0.75 }
{ "_id" : 3, "name" : "Coffee Shop", "description" : "Just coffee", "score" : 1.5 }

With custom weights:
> db.stores.createIndex({name: "text", description: "text"},{default_language: "english",weights: {name: 5, description: 10}})
{
        "numIndexesBefore" : 1,
        "numIndexesAfter" : 2,
        "createdCollectionAutomatically" : false,
        "ok" : 1
}
> db.stores.find({$text: {$search: "Coffee"}},{score: {$meta: "textScore"}})
{ "_id" : 1, "name" : "Java Hut", "description" : "Coffee and cakes", "score" : 7.5 }
{ "_id" : 3, "name" : "Coffee Shop", "description" : "Just coffee", "score" : 11.25 }
> db.stores.find({$text: {$search: "shop"}},{score: {$meta: "textScore"}})
{ "_id" : 5, "name" : "Java Shopping", "description" : "Indonesian goods", "score" : 3.75 }
{ "_id" : 3, "name" : "Coffee Shop", "description" : "Just coffee", "score" : 3.75 }

** Note: So we have created all these indexes in foreground. MongoDB will locks the collection while creation of index.
So we can't perform any query and if we performed it will wait until index is created. So to avoid such a cases(mainly in prod env), we can create background index.

> db.ratings.find()
{ "_id" : ObjectId("62698c54f9a3db2b52598acd"), "person_id" : 1, "score" : 38.724435832396495, "age" : 46 }
{ "_id" : ObjectId("62698c54f9a3db2b52598ace"), "person_id" : 2, "score" : 18.38696024394405, "age" : 58 }
{ "_id" : ObjectId("62698c54f9a3db2b52598acf"), "person_id" : 3, "score" : 40.954752426412114, "age" : 20 }
{ "_id" : ObjectId("62698c54f9a3db2b52598ad0"), "person_id" : 4, "score" : 98.65628585263653, "age" : 40 }
> db.ratings.createIndex({age: -1},{background: true})
{
        "numIndexesBefore" : 1,
        "numIndexesAfter" : 2,
        "createdCollectionAutomatically" : false,
        "ok" : 1
}
